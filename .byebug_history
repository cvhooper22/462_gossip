c
n
c
ex
n
User.where({uuid: @my_guid})
@my_guid
c
n
WebsocketRails.users[user_guid]
n
WebsocketRails.users
user_guid
n
c
user_guid
message
c
user_guid
WebsocketRails.users[user_guid]
connection
c
n
@user
n
@user
c
@user.count
n
@user
c
@user.count
@user
n
c
n
user
user.count
user.length
n
user
n
user
n
c
puts 'true' if !user
puts 'true' if user
puts 'true
user.truthy
user.first
User.where({uuid: @my_guid})
c
@my_guid
c
cccc
@my_guid
c
@my_guid
c
@my_guid
c
User.where({active: true})
User
c
@user
c
n
@user
n
 @user
c
c.send_message('test', {:message => 'testy mctesterson'})
c.respond_to?(:send_message)
c.respond_to?(send_message)
c.responds_to?(send_message)
c = WebsocketRails.users["bdcde4f3-cf32-4ee0-b954-d5a5f9044685"]
WebsocketRails.users.users
c
WebsocketRails.users.users
c
WebsocketRails.users.users
n
@my_guid
c
WebsocketRails.users.users
WebsocketRails.users.users.delete(@my_guid)
WebsocketRails.users.delete(@my_guid)
WebsocketRails.delete(@my_guid)
WebsocketRails.users[@my_guid]
WebsocketRails.users
@my_guid
c
@my_guid
c
found
connection.id
user_connections
c
guid
found
c
nc
n
c
guid
user_connection.connections.find {|s| s.id == connection.id }
user_connection.connections
c
user_connection.connections.find {|s| s.id == connection.id }
connection.id
connection
user_connection.connections.find {|s| puts s.id }
user_connection.connections
user_connection
c
WebsocketRails.users.users
WebsocketRails.users
connection
c
user_connection
c
connection
WebsocketRails.users.users
connection.id
c
connection.id
connection
c
connection.connections.pluck
connection.connections.plcuk
connection.id
connection.connections
connection.id
connection
guid
c
WebsocketRails.users.users.values.first.connections.first.id
WebsocketRails.users.users.values.first.connections.first.connection
WebsocketRails.users.users.values.first.connections.first
WebsocketRails.users.users.values.first.connections.connection
WebsocketRails.users.users.values.first.connections
WebsocketRails.users.users.values.first
WebsocketRails.users.users.values
connection.id
WebsocketRails.users.users.key(connection.id)
WebsocketRails.users.users
WebsocketRails.users
WebsocketRails.users.key(connection.id)
Websocketrails.users.key(connection.id)
connection.id
Websocketrails.users
c
WebsocketRails.users
c
message
c
message
c
connection.id
connection
message.guid
message
c
puts WebsocketRails.users.to_yaml
WebsocketRails.users.methods
WebsocketRails.users.all
WebsocketRails.users
WebsocketRails
WebSocketRails
c
WebsocketRails.send_message :test, params['data']
params['data']
c
puts WebsocketRails.users.to_yaml
puts WebsocketRails.users.to_s
WebsocketRails.users
c
params['data']
c
EventBus
puts request.body
request.body
params
c
new.username
new
new = User.create(:username => 'boogie', :uuid => uuid)
uuid = SecureRandom.uuid
user.username
user = User.by_username(params['username']).first
user = User.by_username(params['username'].first
params['username']
c
new = User.create(:username => params['username'], :uuid => uuid)
uuid = SecureRandom.uuid
c
user.first.nil?
user.first
user.length
user = User.by_username(params['username'])
params
c
params
c
@user
n
c
cc
redirect_to(controller: 'user_show', id: @user.uuid, message: params )
@user = User.by_uuid(params[:uuid]).first
redirect_to(controller: 'user_show', id: @user.uuid, message: params )
User.by_uuid(params[:uuid]).first
params[:uuid]
params[:id]
params
c
params
c
User.by_username(params[:username])
c
params['username']
params[:username]
params
c
params
